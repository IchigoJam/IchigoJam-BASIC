PEEK
0.9.8〜
-----------------------------------------------------------
[ 機能 ]
仮想アドレス領域から値を取得します。

[ コマンド 書式 ]
PEEK(<番地>)

[ 例 ]
PEEK(#E0*8)

[ 解説 ]
<番地> は #000〜#FFF が有効です。
1.1 beta8 より #000〜#100F が有効です。

下記は 0.9.9-RC6 以降で有効になります。
それ以前ではキャラクターパターンなど一部が有効です。

キャラクターパターンの変更は <番地> #000〜#7FF で対応し、
キャラクターコード 0（#00）〜255（#FF）のパターンを取得できます。
キャラクターコード番号×8から8つの番地（+0〜+7）が1文字で構成されます。
番地の若い順に上から入っています。
POKE と異なり、全キャラクターコードを取得可能です。

配列および変数が <番地> #800〜#8FF に対応します。
下位8ビット・上位8ビットの順で、一番上位のビットが符号ビットです。
#800〜#801 が [0]、#802〜#803 が [1] ……とつづき、#8CA〜#8CB の [101] まで、
つづいて #8CC〜#8CD が変数 A から変数がつづき、#8FE〜#8FF の変数 Z となります。

画面表示のキャラクターが #900〜#BFF に対応します。
#900 が横座標 0、縦座標 0 のキャラクターコード、そこから横につづき、
#BFF の横座標 31、縦座標 23 までです。

プログラムが #C00〜#1001 に対応します。
（#1000〜#1001 は 1.1 beta8 より）
行番号 2 番地分(下位8ビット・上位8ビットの順)、
文字数 1 番地分(終了コードを含む) の後
行番号を除いたプログラムそのものが入ります。
終了コードは #00 で1バイトですが、
次の番地が奇数の場合はもう 1 バイト #00 を追加します。
これにより、行番号は必ず偶数の番地になるようにしています。
1023〜1024 バイトになると終了コード分が #1000〜#1001 に入り、
1.1 beta8 以降はこれを検出できます。

キー状態が #1002〜#100F に対応します。（1.1 beta8 より）
#1002 矢印キー・スペースキーの状態（1 ←・2 →・4 ↑・8 ↓・）
#1003 キーバッファに入っている数
#1004〜#100F キーバッファ

ARM Cortex-M0 によるマシン語を入れた場合、マシン語本体、
または USR で実行した結果の値取得として PEEK を取得できます。
